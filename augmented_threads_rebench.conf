# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be chosen if no parameters are given to rebench.py
standard_experiment: augmented_threads
standard_data_file:  'augmented_threads.data'

# general configuration for runs
runs:
    number_of_data_points:  10

# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points:  3   # set a smaller number of measurements
    max_time:              60   # or a maximum runtime in seconds

# definition of benchmark suites
# settings in the benchmark suite will override similar settings of the VM
benchmark_suites:
    FibonacciLargeNumberBenchmark:
        gauge_adapter: RebenchLog
        # location: /Users/...
        # argument format: #processes #iterations #problem size
        command: ReBenchHarness FibonacciLargeNumberBenchmark.%(benchmark)s 1 7 %(input)s
        input_sizes: [1, 5, 7, 10, 13, 15]
        warmup_iterations: 2
        benchmarks:
            - benchFibonacciWithNormalProcesses
            - benchFibonacciWithUserProcesses
        max_runtime: 300
    StackCopyBenchmark:
        gauge_adapter: RebenchLog
        command: ReBenchHarness StackCopyBenchmark.%(benchmark)s 1 7 %(input)s
        input_sizes: [100, 1000, 10000, 100000]
        warmup_iterations: 2
        benchmarks:
            - benchCopyLargeContextsStack
            - benchCopySmallContextsStack
        max_runtime: 300
    StackCopyBenchmarkWithoutGC:
        gauge_adapter: RebenchLog
        command: GCExcludingHarness StackCopyBenchmark.%(benchmark)s 1 7 %(input)s
        input_sizes: [100, 1000, 10000, 100000]
        warmup_iterations: 2
        benchmarks:
            - benchCopyLargeContextsStack
            - benchCopySmallContextsStack
        max_runtime: 300

# VMs have a name and are specified by a path and the binary to be executed
# optional: the number of cores for which the runs have to be executed
virtual_machines:
    Pharo6:
        path: /Users/theseion/devel/Pharo6/latest
        binary: pharo Pharo.image

# define the benchmarks to be executed for a re-executable benchmark run
# special definitions done here should override benchmark suite definitions, and
# VM definitions
experiments:
    augmented_threads:
        description: >
            Run all benchmarks for testing performance between
            normal threads and augmented threads.
        benchmark:
            - FibonacciLargeNumberBenchmark
            - FibonacciManyProcessesBenchmark
            - FibonacciSingleProcessBenchmark
            - StackCopyBenchmark
            - StackCopyBenchmarkWithoutGC
        #input_sizes: 1
        executions:
            # List of VMs and Benchmarks/Benchmark Suites to be run on them
            # benchmarks define here will override the ones defined for the whole run
            
            #the following example is equivalent to the global run definition,
            #but needs to be tested...
            - Pharo6
